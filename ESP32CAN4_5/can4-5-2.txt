//슬레이브(SLAVE)

#include <ACAN_ESP32.h>
#include "DHT.h"
#define DHTPIN 19 
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#define my_can_id 0x7E0

#define myled 18
#define myanalog 4


void setup() {
  Serial.begin(115200);
  pinMode(myled,OUTPUT);
  dht.begin();
  ACAN_ESP32_Settings settings(125000UL);

  //settings.mRequestedCANMode = ACAN_ESP32_Settings::LoopBackMode;
  
  //Default Tx:GPIO4, Rx:GPIO5
  settings.mRxPin = GPIO_NUM_17;
  settings.mTxPin = GPIO_NUM_16;

  const uint32_t ret = ACAN_ESP32::can.begin(settings) ;
  
  if (ret == 0) {    
    Serial.print("Bit Rate prescaler: ") ;
    Serial.println(settings.mBitRatePrescaler) ;
    Serial.print("Time Segment 1:     ") ;
    Serial.println(settings.mTimeSegment1) ;
    Serial.print("Time Segment 2:     ") ;
    Serial.println(settings.mTimeSegment2) ;
    Serial.print("RJW:                ") ;
    Serial.println(settings.mRJW) ;
    Serial.print("Triple Sampling:    ") ;
    Serial.println(settings.mTripleSampling ? "yes" : "no") ;
    Serial.print("Actual bit rate:    ") ;
    Serial.print(settings.actualBitRate ()) ;
    Serial.println(" bit/s") ;
    Serial.print("Exact bit rate ?    ") ;
    Serial.println(settings.exactBitRate () ? "yes" : "no") ;
    Serial.print("Distance            ") ;
    Serial.print(settings.ppmFromDesiredBitRate ()) ;
    Serial.println(" ppm") ;
    Serial.print("Sample point:       ") ;
    Serial.print(settings.samplePointFromBitStart ()) ;
    Serial.println("%") ;
    Serial.println("Configuration OK!");
  } else {
    Serial.print("Configuration error 0x") ;
    Serial.println(ret, HEX) ;    
  }
}

void loop() {
  CANMessage txframe;
  CANMessage rxframe;

  //캔통신으로 수신된 데이터가 있는가?
  if(ACAN_ESP32::can.receive(rxframe)) {

    
    //나한테 온 값이 맞는가?
    if(rxframe.id != my_can_id){
      //나한테 온게 아님 => 아무것도 하지 않음
    }else{
      //나한테 온게 맞음!
      //결과를 16진수로출력
      Serial.print("REQUEST : ");
      for(int i = 0;i<rxframe.len;i++){
        //Serial.print(rxframe.data[i],HEX);
        Serial.print((char)rxframe.data[i]);
        Serial.print(", ");
      }
      Serial.println();

      txframe.id = my_can_id;
      txframe.rtr = 0; //확실히 이게 무슨 기능을 하는지는 모르겠음!
      txframe.len = 8; //내가 보낼 데이터의 길이

      if(rxframe.data[0] == 0){
        //LED제어 명령
        if(rxframe.data[1] == 0){
          //OFF
          digitalWrite(myled,LOW);
        }else if(rxframe.data[1] == 1){
          //ON
          digitalWrite(myled,HIGH);
        }
        //수신받은 데이터 그대로 에코하기
        for(int i = 0;i<8;i++){
          txframe.data[i] = rxframe.data[i];  
        }
      }else if(rxframe.data[0] == 1){
        //가변저항값 측정해서 데이터에 담아서 응답하기
        //ESP32는 가변저항값을 12bit로 측정한다(0~4095)
        int analog = analogRead(myanalog);
        txframe.data[0] = analog / 256;
        txframe.data[1] = analog % 256;
      }else if(rxframe.data[0] == 2){
        float h = dht.readHumidity(); //습도
        float t = dht.readTemperature(); //온도
        int h2 = (int)(h*10);
        int t2 = (int)(t*10);
        txframe.data[0] = h2/256;
        txframe.data[1] = h2%256;
        txframe.data[2] = t2/256;
        txframe.data[3] = t2%256;
      }

      
      
      //전송
      if (ACAN_ESP32::can.tryToSend(txframe)) {
        //성공 
        Serial.println("전송에 성공했습니다");
      }   
  
    }
  }  
}
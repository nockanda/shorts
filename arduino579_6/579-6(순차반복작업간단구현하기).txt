//아두이노의 서보모터 내장 라이브러리
#include <Servo.h>

//서보모터 1개당 인스턴스 1개 필요
Servo myservo;

//아두이노의 디지털2번핀에 서보모터 제어핀이 연결되어있고
//아날로그 피드백선은 아날로그0번핀에 연결되어있다.
#define servo_pin 2
#define feedback A0
int degree_min = 54; //서보의 각도가 0일때 아날로그값
int degree_max = 587; //서보의 각도가 180일때 아날로그값

//0.1초간격을 유지하기 위한 (시간을 저장할)변수
unsigned long t = 0;

int degree = 0;

byte memory_degree[5];

bool task_run = false; //true면 작업시작 false면 작업중지
int task_counter = 0;

void setup() {
  Serial.begin(9600); //9600의 통신속도로 PC와 통신하겠다!
  //서보모터가 연결된핀을 아두이노가 제어하겠다!
  myservo.attach(servo_pin);

  //서보모터의 0도일때의 가변저항값과 180도일때의 가변저항값을 스스로 학습한다
  //각도를0도로 회전하고 1초쉰다음 가변저항값 측정하기!
  myservo.write(0); 
  delay(1000);
  degree_min = analogRead(feedback);
  //각도를180도로 회전하고 1초쉰다음 가변저항값 측정하기!
  myservo.write(180); 
  delay(1000);
  degree_max = analogRead(feedback);
  //기본위치는 90도
  myservo.write(90); 
  delay(1000);
  //아두이노가 제어신호를 보내지 않음!(토크가 발생하지 않음)
  myservo.detach(); 
}

void loop() {
  //작업1번 순차반복작업을 하는 부분
  if(task_run){
    Serial.print("1번위치로 이동하겠습니다! 목표각도값=");
    Serial.println(memory_degree[0]);
    myservo.write(memory_degree[0]);
    delay(1000);
    Serial.print("2번위치로 이동하겠습니다! 목표각도값=");
    Serial.println(memory_degree[1]);
    myservo.write(memory_degree[1]);
    delay(1000);
    Serial.print("3번위치로 이동하겠습니다! 목표각도값=");
    Serial.println(memory_degree[2]);
    myservo.write(memory_degree[2]);
    delay(1000);
    Serial.print("4번위치로 이동하겠습니다! 목표각도값=");
    Serial.println(memory_degree[3]);
    myservo.write(memory_degree[3]);
    delay(1000);
    Serial.print("5번위치로 이동하겠습니다! 목표각도값=");
    Serial.println(memory_degree[4]);
    myservo.write(memory_degree[4]);
    delay(1000);
  }

  //작업2번 시리얼입력을 받아서 각도를 설정하고 제어를 시작 중지하는 부분
  if(Serial.available()){
    //PC에서 문자 1개를 입력받겠다!
    char data = Serial.read();
    int analog = analogRead(feedback);
    int cal_degree = map(analog,degree_min,degree_max,0,180);
    if(cal_degree <0 ) cal_degree = 0; //하한값지정
    if(cal_degree >180) cal_degree = 180; //상한값지정
    if(data == '1'){
      //현재 각도를 1번위치로 기억시키기!
      //하한값을 0으로하고 상한값을 180으로 유지한다!
      memory_degree[0] = cal_degree;
      Serial.print("1번위치를 기억했습니다! 현재각도값=");
      Serial.println(memory_degree[0]);
    }else if(data == '2'){
      memory_degree[1] = cal_degree;
      Serial.print("2번위치를 기억했습니다! 현재각도값=");
      Serial.println(memory_degree[1]);
    }else if(data == '3'){
      memory_degree[2] = cal_degree;
      Serial.print("3번위치를 기억했습니다! 현재각도값=");
      Serial.println(memory_degree[2]);
    }else if(data == '4'){
      memory_degree[3] = cal_degree;
      Serial.print("4번위치를 기억했습니다! 현재각도값=");
      Serial.println(memory_degree[3]);
    }else if(data == '5'){
      memory_degree[4] = cal_degree;
      Serial.print("5번위치를 기억했습니다! 현재각도값=");
      Serial.println(memory_degree[4]);
    }else if(data == 'A'){
      Serial.print("1번위치로 이동하겠습니다! 목표각도값=");
      Serial.println(memory_degree[0]);
      myservo.attach(servo_pin);
      myservo.write(memory_degree[0]);
      delay(300);
      myservo.detach();
    }else if(data == 'B'){
      Serial.print("2번위치로 이동하겠습니다! 목표각도값=");
      Serial.println(memory_degree[1]);
      myservo.attach(servo_pin);
      myservo.write(memory_degree[1]);
      delay(300);
      myservo.detach();
    }else if(data == 'C'){
      Serial.print("3번위치로 이동하겠습니다! 목표각도값=");
      Serial.println(memory_degree[2]);
      myservo.attach(servo_pin);
      myservo.write(memory_degree[2]);
      delay(300);
      myservo.detach();
    }else if(data == 'D'){
      Serial.print("4번위치로 이동하겠습니다! 목표각도값=");
      Serial.println(memory_degree[3]);
      myservo.attach(servo_pin);
      myservo.write(memory_degree[3]);
      delay(300);
      myservo.detach();
    }else if(data == 'E'){
      Serial.print("5번위치로 이동하겠습니다! 목표각도값=");
      Serial.println(memory_degree[4]);
      myservo.attach(servo_pin);
      myservo.write(memory_degree[4]);
      delay(300);
      myservo.detach();
    }else if(data == 'F'){
      //1번위치~5번위치까지 반복
      myservo.attach(servo_pin);
      task_run = true;
    }else if(data == 'G'){
      //작업중지
      myservo.detach();
      task_run = false;
    }
  }
}










